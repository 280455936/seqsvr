// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: seqsvr.proto

#ifndef PROTOBUF_seqsvr_2eproto__INCLUDED
#define PROTOBUF_seqsvr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace zproto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_seqsvr_2eproto();
void protobuf_AssignDesc_seqsvr_2eproto();
void protobuf_ShutdownFile_seqsvr_2eproto();

class FetchNextSequenceReq;
class GetCurrentSequenceReq;
class SequenceRsp;

// ===================================================================

class FetchNextSequenceReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.FetchNextSequenceReq) */ {
 public:
  FetchNextSequenceReq();
  virtual ~FetchNextSequenceReq();

  FetchNextSequenceReq(const FetchNextSequenceReq& from);

  inline FetchNextSequenceReq& operator=(const FetchNextSequenceReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchNextSequenceReq& default_instance();

  void Swap(FetchNextSequenceReq* other);

  // implements Message ----------------------------------------------

  inline FetchNextSequenceReq* New() const { return New(NULL); }

  FetchNextSequenceReq* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FetchNextSequenceReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zproto.FetchNextSequenceReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 user_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_seqsvr_2eproto();
  friend void protobuf_AssignDesc_seqsvr_2eproto();
  friend void protobuf_ShutdownFile_seqsvr_2eproto();

  void InitAsDefaultInstance();
  static FetchNextSequenceReq* default_instance_;
};
// -------------------------------------------------------------------

class GetCurrentSequenceReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GetCurrentSequenceReq) */ {
 public:
  GetCurrentSequenceReq();
  virtual ~GetCurrentSequenceReq();

  GetCurrentSequenceReq(const GetCurrentSequenceReq& from);

  inline GetCurrentSequenceReq& operator=(const GetCurrentSequenceReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCurrentSequenceReq& default_instance();

  void Swap(GetCurrentSequenceReq* other);

  // implements Message ----------------------------------------------

  inline GetCurrentSequenceReq* New() const { return New(NULL); }

  GetCurrentSequenceReq* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetCurrentSequenceReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zproto.GetCurrentSequenceReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 user_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_seqsvr_2eproto();
  friend void protobuf_AssignDesc_seqsvr_2eproto();
  friend void protobuf_ShutdownFile_seqsvr_2eproto();

  void InitAsDefaultInstance();
  static GetCurrentSequenceReq* default_instance_;
};
// -------------------------------------------------------------------

class SequenceRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.SequenceRsp) */ {
 public:
  SequenceRsp();
  virtual ~SequenceRsp();

  SequenceRsp(const SequenceRsp& from);

  inline SequenceRsp& operator=(const SequenceRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SequenceRsp& default_instance();

  void Swap(SequenceRsp* other);

  // implements Message ----------------------------------------------

  inline SequenceRsp* New() const { return New(NULL); }

  SequenceRsp* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SequenceRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 sequence = 1;
  void clear_sequence();
  static const int kSequenceFieldNumber = 1;
  ::google::protobuf::uint64 sequence() const;
  void set_sequence(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zproto.SequenceRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 sequence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_seqsvr_2eproto();
  friend void protobuf_AssignDesc_seqsvr_2eproto();
  friend void protobuf_ShutdownFile_seqsvr_2eproto();

  void InitAsDefaultInstance();
  static SequenceRsp* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FetchNextSequenceReq

// optional uint32 user_id = 1;
inline void FetchNextSequenceReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 FetchNextSequenceReq::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.FetchNextSequenceReq.user_id)
  return user_id_;
}
inline void FetchNextSequenceReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.FetchNextSequenceReq.user_id)
}

// -------------------------------------------------------------------

// GetCurrentSequenceReq

// optional uint32 user_id = 1;
inline void GetCurrentSequenceReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 GetCurrentSequenceReq::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.GetCurrentSequenceReq.user_id)
  return user_id_;
}
inline void GetCurrentSequenceReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.GetCurrentSequenceReq.user_id)
}

// -------------------------------------------------------------------

// SequenceRsp

// optional uint64 sequence = 1;
inline void SequenceRsp::clear_sequence() {
  sequence_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SequenceRsp::sequence() const {
  // @@protoc_insertion_point(field_get:zproto.SequenceRsp.sequence)
  return sequence_;
}
inline void SequenceRsp::set_sequence(::google::protobuf::uint64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:zproto.SequenceRsp.sequence)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_seqsvr_2eproto__INCLUDED
